/* 

백준 실버 사탕 게임 https://www.acmicpc.net/problem/3085
알고리즘 : 구현 , 브루트포스 알고리즘

[ 문제 ]
- 주어진 NxN 보드에서 인접한 두 칸의 사탕을 교환
- 교환 후, 행 또는 열에서 같은 색의 사탕이 연속된 가장 긴 부분을 찾아 그 사탕들을 모두 먹을 때, 
- 이 과정을 통해 먹을 수 있는 최대 사탕 개수 구하기 

[ 로직 ] 
- 보드의 각 칸을 순회하며, 인접한 칸과 사탕을 교환
- 교환 후 보드에서 연속된 같은 색의 사탕의 최대 길이를 계산
- 다시 원래 상태로 교환을 되돌린 후 모든 경우를 탐색하여 최대 사탕 개수를 찾는다. 

*/

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {
    static int max = 1;
    static int N;
    static char[][] board;

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        N = Integer.parseInt(br.readLine());
        board = new char[N][N];

        for (int i = 0; i < N; i++) {
            String s = br.readLine();
            for (int j = 0; j < N; j++) {
                board[i][j] = s.charAt(j);
            }
        }
        
        // 행을 기준으로 오른쪽 색과 변경
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N - 1; j++) {
                swap(i, j, i, j + 1); // 인접한 두 칸 교환
                search();            // 최대 연속 부분 계산
                swap(i, j + 1, i, j); // 원래 상태로 복원
            }
        }

        // 열을 기준으로 아래쪽 색과 변경
        for (int i = 0; i < N - 1; i++) {
            for (int j = 0; j < N; j++) {
                swap(i, j, i + 1, j); // 인접한 두 칸 교환
                search();            // 최대 연속 부분 계산
                swap(i + 1, j, i, j); // 원래 상태로 복원
            }
        }

        System.out.println(max);
        br.close();
    }

    // 두 칸의 사탕을 교환하는 메소드
    public static void swap(int x1, int y1, int x2, int y2) {
        char temp = board[x1][y1];
        board[x1][y1] = board[x2][y2];
        board[x2][y2] = temp;
    }

    // 현재 보드에서 가장 긴 연속된 사탕 개수를 계산하는 메소드
    public static void search() {
        // 행에서 긴 수열 탐색
        for (int i = 0 ; i < N; i ++) {
            int count = 1;
            for (int j = 0; j < N - 1; j++) {
                if (board[i][j] == board[i][j + 1]) {
                    count++;
                    max = Math.max(count, max); // 최대 값 갱신
                } else {
                    count = 1; // 연속이 끊기면 다시 1로 초기화
                }               
            }
        }

        // 열에서 긴 수열 탐색
        for (int i = 0 ; i < N; i ++) {
            int count = 1;
            for (int j = 0; j < N - 1; j++) {
                if (board[j][i] == board[j + 1][i]) {
                    count++;
                    max = Math.max(count, max); // 최대 값 갱신
                } else {
                    count = 1; // 연속이 끊기면 다시 1로 초기화
                }               
            }
        }
    }
}
